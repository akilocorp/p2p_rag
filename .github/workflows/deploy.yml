name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 235639741719.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY_BACKEND: my-chat-app/backend
  ECR_REPOSITORY_FRONTEND: my-chat-app/frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build --build-arg API_URL=http://localhost:5000 -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build --build-arg API_URL=http://localhost:5000 -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Create deployment directory on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          mkdir -p /home/${{ secrets.EC2_USER }}/rag_platform

    - name: Copy docker-compose.prod.yml to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.prod.yml"
        target: "/home/${{ secrets.EC2_USER }}/rag_platform/"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /home/${{ secrets.EC2_USER }}/rag_platform
          
          # Verify docker-compose.prod.yml exists
          if [ ! -f "docker-compose.prod.yml" ]; then
            echo "ERROR: docker-compose.prod.yml not found!"
            exit 1
          fi
          
          # Configure AWS CLI (if not already configured)
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_REGION }}
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # Pull latest images
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
          
          # Stop existing containers and clean up
          docker-compose -f docker-compose.prod.yml down || true
          
          # Check if port 80 is in use and set alternative port if needed
          if ss -tuln | grep -q ':80 ' || lsof -i :80 >/dev/null 2>&1; then
            echo "Port 80 is in use, using port 8080 for frontend"
            export FRONTEND_PORT=8080
            export FRONTEND_HTTPS_PORT=8443
          else
            echo "Port 80 is available, using default ports"
            export FRONTEND_PORT=80
            export FRONTEND_HTTPS_PORT=443
          fi
          
          # Start new containers
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for containers to start
          sleep 10
          
          # Check container status
          docker-compose -f docker-compose.prod.yml ps
          
          # Check for any failed containers and show logs
          if docker-compose -f docker-compose.prod.yml ps | grep -q 'Exit'; then
            echo "=== CONTAINER FAILURE DETECTED ==="
            echo "Frontend container logs:"
            docker-compose -f docker-compose.prod.yml logs frontend || true
            echo "Attempting to restart frontend container..."
            docker-compose -f docker-compose.prod.yml restart frontend || true
            sleep 5
            docker-compose -f docker-compose.prod.yml ps
          fi
          
          # Show deployment information
          echo "=== DEPLOYMENT COMPLETE ==="
          echo "Backend URL: http://$(curl -s http://checkip.amazonaws.com):5000"
          echo "Frontend URL: http://$(curl -s http://checkip.amazonaws.com):${FRONTEND_PORT:-8080}"
          echo "Container Status:"
          docker-compose -f docker-compose.prod.yml ps
          
          # Clean up old images
          docker image prune -f
