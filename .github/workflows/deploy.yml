name: Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 235639741719.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY_BACKEND: my-chat-app/backend
  ECR_REPOSITORY_FRONTEND: my-chat-app/frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

    - name: Build and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build --build-arg API_URL=http://localhost:5000 -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker build --build-arg API_URL=http://localhost:5000 -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /home/${{ secrets.EC2_USER }}/rag_platform || {
            echo "Application directory not found. Creating and cloning repository..."
            git clone https://github.com/${{ github.repository }}.git /home/${{ secrets.EC2_USER }}/rag_platform
            cd /home/${{ secrets.EC2_USER }}/rag_platform
          }
          
          # Pull latest changes
          git pull origin main
          
          # Configure AWS CLI (if not already configured)
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ env.AWS_REGION }}
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          # Pull latest images
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest
          
          # Nuclear cleanup - force remove everything
          echo "Starting aggressive cleanup..."
          
          # Kill containers forcefully by ID (these specific containers are stuck)
          docker kill 027072f924febb04b90c30508d4b7590d7635dc086e8873f0eb0d096f076ec72 2>/dev/null || true
          docker kill 7c4b0d9d2d0ab9abeae4c913ca1efd0b37ecd45472609548d61850fcd32178ce 2>/dev/null || true
          docker rm -f 027072f924febb04b90c30508d4b7590d7635dc086e8873f0eb0d096f076ec72 2>/dev/null || true
          docker rm -f 7c4b0d9d2d0ab9abeae4c913ca1efd0b37ecd45472609548d61850fcd32178ce 2>/dev/null || true
          
          # Kill containers by name
          docker kill rag_platform_frontend_prod rag_platform_backend_prod 2>/dev/null || true
          docker rm -f rag_platform_frontend_prod rag_platform_backend_prod 2>/dev/null || true
          
          # Remove network forcefully
          docker network rm rag_network 2>/dev/null || true
          
          # Clean up any remaining containers with our app name
          docker ps -a --filter "name=rag_platform" -q | xargs -r docker rm -f 2>/dev/null || true
          
          # Prune everything
          docker system prune -f 2>/dev/null || true
          
          # Start new containers
          docker-compose -f docker-compose.prod.yml up -d